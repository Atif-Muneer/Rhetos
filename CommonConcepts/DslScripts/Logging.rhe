Module Common
{
    // Recomended for reading the Log without locking the other server transactions. Data will include transations that are not yet committed.
    SqlQueryable LogReader <LogReader.sql>
    {
        AllPropertiesFrom Common.Log;
        SqlDependsOn Common.Log;
    }
    
    // Recomended for reading the Log without locking the other server transactions. Data will include transations that are not yet committed.
    SqlQueryable LogRelatedItemReader <LogRelatedItemReader.sql>
    {
        AllPropertiesFrom Common.LogRelatedItem;
        SqlDependsOn Common.LogRelatedItem;
    }

    Entity Log
    {
        DateTime Created { SqlDefault <Log.Created default.sql>; Required; }
        ShortString UserName { SqlDefault <Log.UserName default.sql>; Required; }
        ShortString Workstation { SqlDefault <Log.Workstation default.sql>; Required; }
        ShortString ContextInfo { SqlDefault <Log.ContextInfo default.sql>; }
        ShortString Action { Required; }
        ShortString TableName;
        Guid ItemId { SqlIndex; }
        LongString Description;
        
        PrerequisiteAllProperties;
    }
    
    Entity LogRelatedItem
    {
        Reference Log { Detail; Required; }
        ShortString TableName;
        Guid ItemId { SqlIndex; }
        ShortString Relation; // Describes what is the referenced Log.ItemId to the LogRelatedItems.ItemId.
        
        PrerequisiteAllProperties;
    }
    
    SqlQueryable RelatedEventsSource <RelatedEvents.sql>
    {
        AllPropertiesFrom Common.Log;
        
        Reference Log;        
        ShortString Relation;
        ShortString RelatedToTable;
        Guid RelatedToItem;
        
        SqlDependsOn Common.LogReader;
        SqlDependsOn Common.LogRelatedItemReader;
    }
    
    Parameter LoggedItem
    {
        ShortString TableName;
        Guid ItemId;
    }
    
    Computed AuditRelatedEvents 'repository => { throw new Rhetos.UserException("Reading Common.AuditRelatedEvents without filter is not permitted. Use filter by Common.LoggedItem."); }'
    {
        Reference Log;
        DateTime Created;
        ShortString Action;
        ShortString TableName;
        Guid ItemId;
        LongString Description;
        
        ShortString ClientUserName; // The user that used web interface. If the event is logged without web context provided, ClientUserName will be the same as SqlUserName.
        ShortString ClientWorkstation; // The computer name of the user that used web interface. If the event is logged without web context provided, ClientWorkstation will be the same as SqlWorkstation.
        
        ShortString Relation;
        LongString Summary;
        
        FilterBy LoggedItem '(repository, parameter) =>
        {
            /*AuditRelatedEvents LoggedItem Begin*/
            
            return repository.Common.RelatedEventsSource.Query()
                .Where(item => item.RelatedToTable == parameter.TableName && item.RelatedToItem == parameter.ItemId)
                .ToList()
                .Select(item =>
                {
                    IUserInfo clientInfo = LoggingUtility.ExtractUserInfo(item.ContextInfo);
                    
                    var relatedEvent = new Common.AuditRelatedEvents
                    {
                        ID = item.ID,
                        LogID = item.LogID,
                        Created = item.Created,
                        Action = item.Action,
                        TableName = item.TableName,
                        ItemId = item.ItemId,
                        Description = item.Description,
                        
                        ClientUserName = clientInfo.UserName ?? item.UserName,
                        ClientWorkstation = clientInfo.Workstation ?? item.Workstation,
                        
                        Relation = item.Relation,
                        Summary = LoggingUtility.GetSummary(item.Action, item.Description)
                    };
                    
                    /*AuditRelatedEvents LoggedItem ProcessEvent*/
                    return relatedEvent;
                })
                .OrderByDescending(item => item.Created)
                .ThenBy(item => item.Relation)
                .ThenBy(item => item.TableName)
                .ToArray();
        }';
    }
    
    ExternalReference 'Rhetos.Dom.DefaultConcepts.LoggingUtility, Rhetos.Dom.DefaultConcepts';
    ExternalReference 'Rhetos.Utilities.IUserInfo, Rhetos.Utilities';
    
    Computed AuditDataModifications 'repository => { throw new Rhetos.UserException("Reading Common.AuditDataModifications without filter is not permitted. Use filter by Common.LoggedItem or Common.Log."); }'
    {
        Reference Log;
        ShortString Property;
        LongString OldValue;
        LongString NewValue;
        Bool Modified;
        
        FilterBy LoggedItem '(repository, parameter, executionContext) =>
        {
            var eventDescriptions = repository.Common.LogReader.Query()
                .Where(item => item.TableName == parameter.TableName && item.ItemId == parameter.ItemId)
                .Select(item => new { item.ID, item.Action, item.Description, item.Created })
                .ToList()
                .Where(item => item.Action == "Update" || item.Action == "Insert" || item.Action == "Delete")
                .OrderByDescending(item => item.Created)
                .ThenBy(item => item.ID)
                .Select(item => new LoggingUtility.EventDescription { LogID = item.ID, Action = item.Action, Description = item.Description })
                .ToList();
                
            var sql = "SELECT Description FROM " + SqlUtility.GetFullName(parameter.TableName + "_CommonLogDescription") + " WHERE ID = :id";
            var currentItemDescription = executionContext.NHibernateSession.CreateSQLQuery(sql)
                .AddScalar("Description", NHibernate.NHibernateUtil.String)
                .SetString("id", SqlUtility.GuidToString(parameter.ItemId.Value))
                .List<string>()
                .SingleOrDefault();
            
            var result = LoggingUtility.ReconstructDataModifications(eventDescriptions, currentItemDescription);
            return result.Select(item => new Common.AuditDataModifications
                {
                    ID = Guid.NewGuid(),
                    LogID = item.LogID,
                    Property = item.Property,
                    OldValue = item.OldValue,
                    NewValue = item.NewValue,
                    Modified = item.Modified
                }).ToArray();
        }'
        {
            UseExecutionContext;
        }
        
        // Provide only ID property of the Log instance for the filter parameter.
        FilterBy Log '(repository, parameter) =>
        {
            var log = repository.Common.LogReader.Filter(new[] { parameter.ID }).SingleOrDefault();
            if (log == null)
                throw new Rhetos.UserException("There is no record in Common.Log with ID " + SqlUtility.GuidToString(parameter.ID) + ".");
            var modifications = repository.Common.AuditDataModifications.Filter(new LoggedItem { TableName = log.TableName, ItemId = log.ItemId });
            return modifications.Where(m => m.LogID == parameter.ID).ToArray();
        }';
    }
    
    ExternalReference 'NHibernate.NHibernateUtil, NHibernate';
}